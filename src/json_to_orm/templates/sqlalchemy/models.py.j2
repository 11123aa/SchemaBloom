"""
SQLAlchemy models generated from JSON schema.
Generated by SchemaBloom (JSON-to-ORM)
"""

from sqlalchemy import Column, Integer, String, Boolean, DateTime, Text, ForeignKey
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import relationship
from datetime import datetime

Base = declarative_base()

{% for table in tables %}
class {{ table.name | pascal_case }}(Base):
    """
    {{ table.name | pascal_case }} model.
    """
    __tablename__ = '{{ table.name | snake_case }}'
    
    {% for field in table.fields %}
    {{ field.name | snake_case }} = Column(
        {% if field.is_primary_key %}
        Integer, primary_key=True, autoincrement=True
        {% else %}
        {{ field.type | sqlalchemy_type }}{% if field.max_length %}({{ field.max_length }}){% endif %}{% if not field.is_nullable %}, nullable=False{% endif %}{% if field.is_unique %}, unique=True{% endif %}{% if field.default_value %}, default={{ field.default_value }}{% endif %}
        {% endif %}
    ){% if field.description %}  # {{ field.description }}{% endif %}
    
    {% endfor %}
    
    {% if table.relationships %}
    # Relationships
    {% for relation in table.relationships %}
    {% if relation.type == "one_to_many" %}
    {{ relation.field_name | snake_case }} = relationship("{{ relation.related_table | pascal_case }}", back_populates="{{ relation.foreign_key | snake_case }}_ref")
    {% elif relation.type == "many_to_one" %}
    {{ relation.field_name | snake_case }} = relationship("{{ relation.related_table | pascal_case }}", back_populates="{{ relation.field_name | snake_case }}_list")
    {% endif %}
    {% endfor %}
    {% endif %}
    
    def __repr__(self):
        return f"<{{ table.name | pascal_case }}(id={self.id})>"

{% endfor %} 