"""
Django models generated from JSON schema.
Generated by SchemaBloom (JSON-to-ORM)
"""

from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.validators import MinValueValidator, MaxValueValidator
import uuid


{% for table in tables %}
class {{ table.name | pascal_case }}(models.Model):
    """
    {{ table.name | title_case }} model.
    """
    
    {% for field in table.fields %}
    {% if field.is_primary_key %}
    {{ field.name | snake_case }} = models.AutoField(primary_key=True)
    {% else %}
    {{ field.name | snake_case }} = models.{{ field.type }}()
    {% endif %}
    {% endfor %}
    
    {% if table.relationships %}
    # Relationships
    {% for relation in table.relationships %}
    {% if relation.type == "one_to_many" %}
    # One-to-many relationship with {{ relation.related_table | pascal_case }}
    {% elif relation.type == "many_to_one" %}
    {{ relation.field_name | snake_case }} = models.ForeignKey(
        '{{ relation.related_table | pascal_case }}',
        on_delete=models.CASCADE,
        related_name='{{ table.name | snake_case }}_set'
    )
    {% elif relation.type == "many_to_many" %}
    {{ relation.field_name | snake_case }} = models.ManyToManyField(
        '{{ relation.related_table | pascal_case }}',
        related_name='{{ table.name | snake_case }}_set'
    )
    {% elif relation.type == "one_to_one" %}
    {{ relation.field_name | snake_case }} = models.OneToOneField(
        '{{ relation.related_table | pascal_case }}',
        on_delete=models.CASCADE,
        related_name='{{ table.name | snake_case }}'
    )
    {% endif %}
    {% endfor %}
    {% endif %}
    
    class Meta:
        db_table = '{{ table.name | snake_case }}'
        verbose_name = '{{ table.name | title_case }}'
        verbose_name_plural = '{{ table.name | title_case }}'
        {% if table.ordering %}ordering = {{ table.ordering }}{% endif %}
    
    def __str__(self):
        {% if table.fields | selectattr("is_unique") | first %}
        return str(self.{{ (table.fields | selectattr("is_unique") | first).name | snake_case }})
        {% elif table.fields | selectattr("name", "equalto", "name") | first %}
        return self.name
        {% elif table.fields | selectattr("name", "equalto", "title") | first %}
        return self.title
        {% else %}
        return f"{{ table.name | title_case }} {self.id}"
        {% endif %}
    
    {% if table.relationships %}
    # Relationship methods
    {% for relation in table.relationships %}
    {% if relation.type == "one_to_many" %}
    def get_{{ relation.related_table | snake_case }}_count(self):
        """Get count of related {{ relation.related_table | title_case }} objects."""
        return self.{{ relation.related_table | snake_case }}_set.count()
    {% endif %}
    {% endfor %}
    {% endif %}

{% endfor %} 