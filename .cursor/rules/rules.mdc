---
alwaysApply: true
---
Ты работаешь над проектом SchemaBloom - CLI-утилитой для генерации ORM моделей из JSON-схем. Проект поддерживает Prisma, Django и SQLAlchemy. Все архитектурные решения приняты и документированы в `docs/architectural_decisions.md`. Используй этот файл как справочник при разработке.

## Документирование процесса
всегда обращайся к папке docs

1. Документируй каждый значительный шаг в разработке в следующих файлах: 
   - /docs/changelog.md - хронологический журнал всех изменений
   - /docs/tasktracker.md - статус выполнения задач с описанием
2. Формат записи в changelog.md: 

   ```javascript
   markdown
   ```

   ```javascript
   ## [YYYY-MM-DD] - Краткое описание изменений
   ### Добавлено
   - Описание новых функций
   
   ### Изменено
   - Описание модификаций
   
   ### Исправлено
   - Описание исправлений
   ```
3. Формат записи в tasktracker.md: 

   ```javascript
   markdown
   ```

   ```javascript
   ## Задача: [Название задачи]
   - **Статус**: [Не начата/В процессе/Завершена]
   - **Описание**: [Детальное описание]
   - **Шаги выполнения**:
     - [x] Завершенный шаг
     - [ ] Текущий шаг
     - [ ] Запланированный шаг
   - **Зависимости**: [Связи с другими задачами]
   ```

## Процесс разработки

 1. Следуй архитектурным решениям и стандартам, описанным в Project.md.
 2. Соблюдай принципы SOLID, KISS, DRY.
 3. Проводи code review для всех изменений.
 4. Используй единый стиль кодирования (линтеры, pre-commit hooks).
 5. Не оставляй неиспользуемый код и комментарии.
 6. Всегда сохраняй контекст текущей задачи и общую цель проекта.
 7. **После каждого значительного изменения обязательно обновляй README.md для удобства пользователей.**

## Документирование кода и структуры

1. При создании нового файла добавляй в его начало: 

   ```javascript
   /**
    * @file: [имя файла]
    * @description: [краткое описание]
    * @dependencies: [связанные компоненты/файлы]
    * @created: [дата]
    */
   ```
2. После реализации нового функционала актуализируй 

   ```javascript
   /docs/project.md
   ```

   , включая: 
   - Обновленную архитектуру проекта
   - Описание новых компонентов и их взаимодействий
   - При необходимости, диаграммы и схемы в формате Mermaid
3. **ОБЯЗАТЕЛЬНО обновляй README.md при добавлении новых функций или улучшении существующих:**
   - Добавляй описание новых возможностей
   - Обновляй примеры использования
   - Дополняй список поддерживаемых форматов
   - Обновляй статус проекта и прогресс
   - Добавляй новые команды CLI
   - Обновляй требования к установке
   - Дополняй раздел с примерами
4. Поддерживай актуальную документацию API и интерфейсов.
5. Файл `docs/architectural_decisions.md` содержит все принятые решения по архитектурным вопросам из qa.md и должен использоваться как справочник при разработке.

## Коммуникация

1. Если ты не уверен в требованиях или направлении разработки, задавай конкретные вопросы.
2. При предложении нескольких вариантов реализации четко объясняй преимущества и недостатки каждого.
3. Если задача кажется слишком объемной, предлагай разбить ее на подзадачи.

## Приватность и безопасность

1. ВСЯ документация проекта (docs/) должна оставаться приватной и НЕ попадать в Git репозиторий.
2. В публичных файлах (README.md, pyproject.toml) НЕ упоминать:
   - Процесс разработки с ИИ
   - Внутренние архитектурные решения
   - Детали планирования и управления задачами
   - Ссылки на приватную документацию
3. Публичная информация должна содержать только:
   - Базовое описание функциональности
   - Инструкции по установке и использованию
   - Примеры кода
   - Ссылки на репозиторий
4. Все внутренние решения, планы, архитектурные детали остаются в приватной документации.

При любых изменениях в проекте сначала актуализируй приватную документацию, а затем приступай к следующему шагу разработки. Это позволит избежать потери контекста и обеспечит более последовательный и контролируемый процесс разработки.
description:
globs:
alwaysApply: false
---
